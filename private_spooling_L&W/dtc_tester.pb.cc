// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ex.proto

#include "ex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dtc_tester {
constexpr StdReturnType::StdReturnType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : std_return_type_(0u){}
struct StdReturnTypeDefaultTypeInternal {
  constexpr StdReturnTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StdReturnTypeDefaultTypeInternal() {}
  union {
    StdReturnType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StdReturnTypeDefaultTypeInternal _StdReturnType_default_instance_;
constexpr DemEventIdType::DemEventIdType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dem_event_id_type_(0u){}
struct DemEventIdTypeDefaultTypeInternal {
  constexpr DemEventIdTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DemEventIdTypeDefaultTypeInternal() {}
  union {
    DemEventIdType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DemEventIdTypeDefaultTypeInternal _DemEventIdType_default_instance_;
constexpr ParamDemSetOpCycleState::ParamDemSetOpCycleState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_cycle_id_(0u)
  , cycle_state_(0u){}
struct ParamDemSetOpCycleStateDefaultTypeInternal {
  constexpr ParamDemSetOpCycleStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParamDemSetOpCycleStateDefaultTypeInternal() {}
  union {
    ParamDemSetOpCycleState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParamDemSetOpCycleStateDefaultTypeInternal _ParamDemSetOpCycleState_default_instance_;
constexpr ParamDemSetEnableCond::ParamDemSetEnableCond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_condition_id_(0u)
  , condition_fulfilled_(false){}
struct ParamDemSetEnableCondDefaultTypeInternal {
  constexpr ParamDemSetEnableCondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParamDemSetEnableCondDefaultTypeInternal() {}
  union {
    ParamDemSetEnableCond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParamDemSetEnableCondDefaultTypeInternal _ParamDemSetEnableCond_default_instance_;
constexpr ParamDemSetEventStatus::ParamDemSetEventStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0u)
  , event_status_(0u){}
struct ParamDemSetEventStatusDefaultTypeInternal {
  constexpr ParamDemSetEventStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParamDemSetEventStatusDefaultTypeInternal() {}
  union {
    ParamDemSetEventStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParamDemSetEventStatusDefaultTypeInternal _ParamDemSetEventStatus_default_instance_;
constexpr ParamGetEventOfDtc::ParamGetEventOfDtc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dtc_(0u){}
struct ParamGetEventOfDtcDefaultTypeInternal {
  constexpr ParamGetEventOfDtcDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParamGetEventOfDtcDefaultTypeInternal() {}
  union {
    ParamGetEventOfDtc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParamGetEventOfDtcDefaultTypeInternal _ParamGetEventOfDtc_default_instance_;
}  // namespace dtc_tester
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ex_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::StdReturnType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::StdReturnType, std_return_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::DemEventIdType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::DemEventIdType, dem_event_id_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetOpCycleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetOpCycleState, operation_cycle_id_),
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetOpCycleState, cycle_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetEnableCond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetEnableCond, enable_condition_id_),
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetEnableCond, condition_fulfilled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetEventStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetEventStatus, event_id_),
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamDemSetEventStatus, event_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamGetEventOfDtc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtc_tester::ParamGetEventOfDtc, dtc_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtc_tester::StdReturnType)},
  { 7, -1, -1, sizeof(::dtc_tester::DemEventIdType)},
  { 14, -1, -1, sizeof(::dtc_tester::ParamDemSetOpCycleState)},
  { 22, -1, -1, sizeof(::dtc_tester::ParamDemSetEnableCond)},
  { 30, -1, -1, sizeof(::dtc_tester::ParamDemSetEventStatus)},
  { 38, -1, -1, sizeof(::dtc_tester::ParamGetEventOfDtc)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtc_tester::_StdReturnType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtc_tester::_DemEventIdType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtc_tester::_ParamDemSetOpCycleState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtc_tester::_ParamDemSetEnableCond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtc_tester::_ParamDemSetEventStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dtc_tester::_ParamGetEventOfDtc_default_instance_),
};

const char descriptor_table_protodef_ex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010ex.proto\022\ndtc_tester\"(\n\rStdReturnType\022"
  "\027\n\017std_return_type\030\001 \001(\r\"+\n\016DemEventIdTy"
  "pe\022\031\n\021dem_event_id_type\030\001 \001(\r\"J\n\027ParamDe"
  "mSetOpCycleState\022\032\n\022operation_cycle_id\030\001"
  " \001(\r\022\023\n\013cycle_state\030\002 \001(\r\"Q\n\025ParamDemSet"
  "EnableCond\022\033\n\023enable_condition_id\030\001 \001(\r\022"
  "\033\n\023condition_fulfilled\030\002 \001(\010\"@\n\026ParamDem"
  "SetEventStatus\022\020\n\010event_id\030\001 \001(\r\022\024\n\014even"
  "t_status\030\002 \001(\r\"!\n\022ParamGetEventOfDtc\022\013\n\003"
  "dtc\030\001 \001(\r2\354\002\n\nRpcService\022^\n\032Dem_SetOpera"
  "tionCycleState\022#.dtc_tester.ParamDemSetO"
  "pCycleState\032\031.dtc_tester.StdReturnType\"\000"
  "\022X\n\026Dem_SetEnableCondition\022!.dtc_tester."
  "ParamDemSetEnableCond\032\031.dtc_tester.StdRe"
  "turnType\"\000\022U\n\022Dem_SetEventStatus\022\".dtc_t"
  "ester.ParamDemSetEventStatus\032\031.dtc_teste"
  "r.StdReturnType\"\000\022M\n\rGetEventOfDTC\022\036.dtc"
  "_tester.ParamGetEventOfDtc\032\032.dtc_tester."
  "DemEventIdType\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ex_2eproto = {
  false, false, 744, descriptor_table_protodef_ex_2eproto, "ex.proto", 
  &descriptor_table_ex_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_ex_2eproto::offsets,
  file_level_metadata_ex_2eproto, file_level_enum_descriptors_ex_2eproto, file_level_service_descriptors_ex_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ex_2eproto_getter() {
  return &descriptor_table_ex_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ex_2eproto(&descriptor_table_ex_2eproto);
namespace dtc_tester {

// ===================================================================

class StdReturnType::_Internal {
 public:
};

StdReturnType::StdReturnType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dtc_tester.StdReturnType)
}
StdReturnType::StdReturnType(const StdReturnType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  std_return_type_ = from.std_return_type_;
  // @@protoc_insertion_point(copy_constructor:dtc_tester.StdReturnType)
}

void StdReturnType::SharedCtor() {
std_return_type_ = 0u;
}

StdReturnType::~StdReturnType() {
  // @@protoc_insertion_point(destructor:dtc_tester.StdReturnType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StdReturnType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StdReturnType::ArenaDtor(void* object) {
  StdReturnType* _this = reinterpret_cast< StdReturnType* >(object);
  (void)_this;
}
void StdReturnType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StdReturnType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StdReturnType::Clear() {
// @@protoc_insertion_point(message_clear_start:dtc_tester.StdReturnType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  std_return_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StdReturnType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 std_return_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          std_return_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdReturnType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtc_tester.StdReturnType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 std_return_type = 1;
  if (this->_internal_std_return_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_std_return_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtc_tester.StdReturnType)
  return target;
}

size_t StdReturnType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtc_tester.StdReturnType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 std_return_type = 1;
  if (this->_internal_std_return_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_std_return_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StdReturnType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StdReturnType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StdReturnType::GetClassData() const { return &_class_data_; }

void StdReturnType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StdReturnType *>(to)->MergeFrom(
      static_cast<const StdReturnType &>(from));
}


void StdReturnType::MergeFrom(const StdReturnType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtc_tester.StdReturnType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_std_return_type() != 0) {
    _internal_set_std_return_type(from._internal_std_return_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StdReturnType::CopyFrom(const StdReturnType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtc_tester.StdReturnType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdReturnType::IsInitialized() const {
  return true;
}

void StdReturnType::InternalSwap(StdReturnType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(std_return_type_, other->std_return_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StdReturnType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ex_2eproto_getter, &descriptor_table_ex_2eproto_once,
      file_level_metadata_ex_2eproto[0]);
}

// ===================================================================

class DemEventIdType::_Internal {
 public:
};

DemEventIdType::DemEventIdType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dtc_tester.DemEventIdType)
}
DemEventIdType::DemEventIdType(const DemEventIdType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dem_event_id_type_ = from.dem_event_id_type_;
  // @@protoc_insertion_point(copy_constructor:dtc_tester.DemEventIdType)
}

void DemEventIdType::SharedCtor() {
dem_event_id_type_ = 0u;
}

DemEventIdType::~DemEventIdType() {
  // @@protoc_insertion_point(destructor:dtc_tester.DemEventIdType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DemEventIdType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DemEventIdType::ArenaDtor(void* object) {
  DemEventIdType* _this = reinterpret_cast< DemEventIdType* >(object);
  (void)_this;
}
void DemEventIdType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DemEventIdType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DemEventIdType::Clear() {
// @@protoc_insertion_point(message_clear_start:dtc_tester.DemEventIdType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dem_event_id_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemEventIdType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dem_event_id_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dem_event_id_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemEventIdType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtc_tester.DemEventIdType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dem_event_id_type = 1;
  if (this->_internal_dem_event_id_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dem_event_id_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtc_tester.DemEventIdType)
  return target;
}

size_t DemEventIdType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtc_tester.DemEventIdType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dem_event_id_type = 1;
  if (this->_internal_dem_event_id_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dem_event_id_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DemEventIdType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DemEventIdType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DemEventIdType::GetClassData() const { return &_class_data_; }

void DemEventIdType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DemEventIdType *>(to)->MergeFrom(
      static_cast<const DemEventIdType &>(from));
}


void DemEventIdType::MergeFrom(const DemEventIdType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtc_tester.DemEventIdType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dem_event_id_type() != 0) {
    _internal_set_dem_event_id_type(from._internal_dem_event_id_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DemEventIdType::CopyFrom(const DemEventIdType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtc_tester.DemEventIdType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemEventIdType::IsInitialized() const {
  return true;
}

void DemEventIdType::InternalSwap(DemEventIdType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(dem_event_id_type_, other->dem_event_id_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DemEventIdType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ex_2eproto_getter, &descriptor_table_ex_2eproto_once,
      file_level_metadata_ex_2eproto[1]);
}

// ===================================================================

class ParamDemSetOpCycleState::_Internal {
 public:
};

ParamDemSetOpCycleState::ParamDemSetOpCycleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dtc_tester.ParamDemSetOpCycleState)
}
ParamDemSetOpCycleState::ParamDemSetOpCycleState(const ParamDemSetOpCycleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&operation_cycle_id_, &from.operation_cycle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycle_state_) -
    reinterpret_cast<char*>(&operation_cycle_id_)) + sizeof(cycle_state_));
  // @@protoc_insertion_point(copy_constructor:dtc_tester.ParamDemSetOpCycleState)
}

void ParamDemSetOpCycleState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operation_cycle_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cycle_state_) -
    reinterpret_cast<char*>(&operation_cycle_id_)) + sizeof(cycle_state_));
}

ParamDemSetOpCycleState::~ParamDemSetOpCycleState() {
  // @@protoc_insertion_point(destructor:dtc_tester.ParamDemSetOpCycleState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParamDemSetOpCycleState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParamDemSetOpCycleState::ArenaDtor(void* object) {
  ParamDemSetOpCycleState* _this = reinterpret_cast< ParamDemSetOpCycleState* >(object);
  (void)_this;
}
void ParamDemSetOpCycleState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParamDemSetOpCycleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParamDemSetOpCycleState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtc_tester.ParamDemSetOpCycleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&operation_cycle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cycle_state_) -
      reinterpret_cast<char*>(&operation_cycle_id_)) + sizeof(cycle_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamDemSetOpCycleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 operation_cycle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operation_cycle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cycle_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cycle_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamDemSetOpCycleState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtc_tester.ParamDemSetOpCycleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 operation_cycle_id = 1;
  if (this->_internal_operation_cycle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_operation_cycle_id(), target);
  }

  // uint32 cycle_state = 2;
  if (this->_internal_cycle_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cycle_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtc_tester.ParamDemSetOpCycleState)
  return target;
}

size_t ParamDemSetOpCycleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtc_tester.ParamDemSetOpCycleState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 operation_cycle_id = 1;
  if (this->_internal_operation_cycle_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_operation_cycle_id());
  }

  // uint32 cycle_state = 2;
  if (this->_internal_cycle_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cycle_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamDemSetOpCycleState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParamDemSetOpCycleState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamDemSetOpCycleState::GetClassData() const { return &_class_data_; }

void ParamDemSetOpCycleState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParamDemSetOpCycleState *>(to)->MergeFrom(
      static_cast<const ParamDemSetOpCycleState &>(from));
}


void ParamDemSetOpCycleState::MergeFrom(const ParamDemSetOpCycleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtc_tester.ParamDemSetOpCycleState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_operation_cycle_id() != 0) {
    _internal_set_operation_cycle_id(from._internal_operation_cycle_id());
  }
  if (from._internal_cycle_state() != 0) {
    _internal_set_cycle_state(from._internal_cycle_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamDemSetOpCycleState::CopyFrom(const ParamDemSetOpCycleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtc_tester.ParamDemSetOpCycleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamDemSetOpCycleState::IsInitialized() const {
  return true;
}

void ParamDemSetOpCycleState::InternalSwap(ParamDemSetOpCycleState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParamDemSetOpCycleState, cycle_state_)
      + sizeof(ParamDemSetOpCycleState::cycle_state_)
      - PROTOBUF_FIELD_OFFSET(ParamDemSetOpCycleState, operation_cycle_id_)>(
          reinterpret_cast<char*>(&operation_cycle_id_),
          reinterpret_cast<char*>(&other->operation_cycle_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamDemSetOpCycleState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ex_2eproto_getter, &descriptor_table_ex_2eproto_once,
      file_level_metadata_ex_2eproto[2]);
}

// ===================================================================

class ParamDemSetEnableCond::_Internal {
 public:
};

ParamDemSetEnableCond::ParamDemSetEnableCond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dtc_tester.ParamDemSetEnableCond)
}
ParamDemSetEnableCond::ParamDemSetEnableCond(const ParamDemSetEnableCond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_condition_id_, &from.enable_condition_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&condition_fulfilled_) -
    reinterpret_cast<char*>(&enable_condition_id_)) + sizeof(condition_fulfilled_));
  // @@protoc_insertion_point(copy_constructor:dtc_tester.ParamDemSetEnableCond)
}

void ParamDemSetEnableCond::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_condition_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&condition_fulfilled_) -
    reinterpret_cast<char*>(&enable_condition_id_)) + sizeof(condition_fulfilled_));
}

ParamDemSetEnableCond::~ParamDemSetEnableCond() {
  // @@protoc_insertion_point(destructor:dtc_tester.ParamDemSetEnableCond)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParamDemSetEnableCond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParamDemSetEnableCond::ArenaDtor(void* object) {
  ParamDemSetEnableCond* _this = reinterpret_cast< ParamDemSetEnableCond* >(object);
  (void)_this;
}
void ParamDemSetEnableCond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParamDemSetEnableCond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParamDemSetEnableCond::Clear() {
// @@protoc_insertion_point(message_clear_start:dtc_tester.ParamDemSetEnableCond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_condition_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&condition_fulfilled_) -
      reinterpret_cast<char*>(&enable_condition_id_)) + sizeof(condition_fulfilled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamDemSetEnableCond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 enable_condition_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_condition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool condition_fulfilled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          condition_fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamDemSetEnableCond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtc_tester.ParamDemSetEnableCond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 enable_condition_id = 1;
  if (this->_internal_enable_condition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_enable_condition_id(), target);
  }

  // bool condition_fulfilled = 2;
  if (this->_internal_condition_fulfilled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_condition_fulfilled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtc_tester.ParamDemSetEnableCond)
  return target;
}

size_t ParamDemSetEnableCond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtc_tester.ParamDemSetEnableCond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 enable_condition_id = 1;
  if (this->_internal_enable_condition_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_enable_condition_id());
  }

  // bool condition_fulfilled = 2;
  if (this->_internal_condition_fulfilled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamDemSetEnableCond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParamDemSetEnableCond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamDemSetEnableCond::GetClassData() const { return &_class_data_; }

void ParamDemSetEnableCond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParamDemSetEnableCond *>(to)->MergeFrom(
      static_cast<const ParamDemSetEnableCond &>(from));
}


void ParamDemSetEnableCond::MergeFrom(const ParamDemSetEnableCond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtc_tester.ParamDemSetEnableCond)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable_condition_id() != 0) {
    _internal_set_enable_condition_id(from._internal_enable_condition_id());
  }
  if (from._internal_condition_fulfilled() != 0) {
    _internal_set_condition_fulfilled(from._internal_condition_fulfilled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamDemSetEnableCond::CopyFrom(const ParamDemSetEnableCond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtc_tester.ParamDemSetEnableCond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamDemSetEnableCond::IsInitialized() const {
  return true;
}

void ParamDemSetEnableCond::InternalSwap(ParamDemSetEnableCond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParamDemSetEnableCond, condition_fulfilled_)
      + sizeof(ParamDemSetEnableCond::condition_fulfilled_)
      - PROTOBUF_FIELD_OFFSET(ParamDemSetEnableCond, enable_condition_id_)>(
          reinterpret_cast<char*>(&enable_condition_id_),
          reinterpret_cast<char*>(&other->enable_condition_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamDemSetEnableCond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ex_2eproto_getter, &descriptor_table_ex_2eproto_once,
      file_level_metadata_ex_2eproto[3]);
}

// ===================================================================

class ParamDemSetEventStatus::_Internal {
 public:
};

ParamDemSetEventStatus::ParamDemSetEventStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dtc_tester.ParamDemSetEventStatus)
}
ParamDemSetEventStatus::ParamDemSetEventStatus(const ParamDemSetEventStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_status_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(event_status_));
  // @@protoc_insertion_point(copy_constructor:dtc_tester.ParamDemSetEventStatus)
}

void ParamDemSetEventStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_status_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(event_status_));
}

ParamDemSetEventStatus::~ParamDemSetEventStatus() {
  // @@protoc_insertion_point(destructor:dtc_tester.ParamDemSetEventStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParamDemSetEventStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParamDemSetEventStatus::ArenaDtor(void* object) {
  ParamDemSetEventStatus* _this = reinterpret_cast< ParamDemSetEventStatus* >(object);
  (void)_this;
}
void ParamDemSetEventStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParamDemSetEventStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParamDemSetEventStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:dtc_tester.ParamDemSetEventStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_status_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(event_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamDemSetEventStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 event_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          event_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamDemSetEventStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtc_tester.ParamDemSetEventStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_id = 1;
  if (this->_internal_event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // uint32 event_status = 2;
  if (this->_internal_event_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtc_tester.ParamDemSetEventStatus)
  return target;
}

size_t ParamDemSetEventStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtc_tester.ParamDemSetEventStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 event_id = 1;
  if (this->_internal_event_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
  }

  // uint32 event_status = 2;
  if (this->_internal_event_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamDemSetEventStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParamDemSetEventStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamDemSetEventStatus::GetClassData() const { return &_class_data_; }

void ParamDemSetEventStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParamDemSetEventStatus *>(to)->MergeFrom(
      static_cast<const ParamDemSetEventStatus &>(from));
}


void ParamDemSetEventStatus::MergeFrom(const ParamDemSetEventStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtc_tester.ParamDemSetEventStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_event_id() != 0) {
    _internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_event_status() != 0) {
    _internal_set_event_status(from._internal_event_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamDemSetEventStatus::CopyFrom(const ParamDemSetEventStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtc_tester.ParamDemSetEventStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamDemSetEventStatus::IsInitialized() const {
  return true;
}

void ParamDemSetEventStatus::InternalSwap(ParamDemSetEventStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParamDemSetEventStatus, event_status_)
      + sizeof(ParamDemSetEventStatus::event_status_)
      - PROTOBUF_FIELD_OFFSET(ParamDemSetEventStatus, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamDemSetEventStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ex_2eproto_getter, &descriptor_table_ex_2eproto_once,
      file_level_metadata_ex_2eproto[4]);
}

// ===================================================================

class ParamGetEventOfDtc::_Internal {
 public:
};

ParamGetEventOfDtc::ParamGetEventOfDtc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dtc_tester.ParamGetEventOfDtc)
}
ParamGetEventOfDtc::ParamGetEventOfDtc(const ParamGetEventOfDtc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dtc_ = from.dtc_;
  // @@protoc_insertion_point(copy_constructor:dtc_tester.ParamGetEventOfDtc)
}

void ParamGetEventOfDtc::SharedCtor() {
dtc_ = 0u;
}

ParamGetEventOfDtc::~ParamGetEventOfDtc() {
  // @@protoc_insertion_point(destructor:dtc_tester.ParamGetEventOfDtc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParamGetEventOfDtc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParamGetEventOfDtc::ArenaDtor(void* object) {
  ParamGetEventOfDtc* _this = reinterpret_cast< ParamGetEventOfDtc* >(object);
  (void)_this;
}
void ParamGetEventOfDtc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParamGetEventOfDtc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParamGetEventOfDtc::Clear() {
// @@protoc_insertion_point(message_clear_start:dtc_tester.ParamGetEventOfDtc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dtc_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamGetEventOfDtc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamGetEventOfDtc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtc_tester.ParamGetEventOfDtc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dtc = 1;
  if (this->_internal_dtc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dtc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtc_tester.ParamGetEventOfDtc)
  return target;
}

size_t ParamGetEventOfDtc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtc_tester.ParamGetEventOfDtc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dtc = 1;
  if (this->_internal_dtc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dtc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamGetEventOfDtc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParamGetEventOfDtc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamGetEventOfDtc::GetClassData() const { return &_class_data_; }

void ParamGetEventOfDtc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParamGetEventOfDtc *>(to)->MergeFrom(
      static_cast<const ParamGetEventOfDtc &>(from));
}


void ParamGetEventOfDtc::MergeFrom(const ParamGetEventOfDtc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dtc_tester.ParamGetEventOfDtc)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dtc() != 0) {
    _internal_set_dtc(from._internal_dtc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamGetEventOfDtc::CopyFrom(const ParamGetEventOfDtc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtc_tester.ParamGetEventOfDtc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamGetEventOfDtc::IsInitialized() const {
  return true;
}

void ParamGetEventOfDtc::InternalSwap(ParamGetEventOfDtc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(dtc_, other->dtc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamGetEventOfDtc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ex_2eproto_getter, &descriptor_table_ex_2eproto_once,
      file_level_metadata_ex_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dtc_tester
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtc_tester::StdReturnType* Arena::CreateMaybeMessage< ::dtc_tester::StdReturnType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtc_tester::StdReturnType >(arena);
}
template<> PROTOBUF_NOINLINE ::dtc_tester::DemEventIdType* Arena::CreateMaybeMessage< ::dtc_tester::DemEventIdType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtc_tester::DemEventIdType >(arena);
}
template<> PROTOBUF_NOINLINE ::dtc_tester::ParamDemSetOpCycleState* Arena::CreateMaybeMessage< ::dtc_tester::ParamDemSetOpCycleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtc_tester::ParamDemSetOpCycleState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtc_tester::ParamDemSetEnableCond* Arena::CreateMaybeMessage< ::dtc_tester::ParamDemSetEnableCond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtc_tester::ParamDemSetEnableCond >(arena);
}
template<> PROTOBUF_NOINLINE ::dtc_tester::ParamDemSetEventStatus* Arena::CreateMaybeMessage< ::dtc_tester::ParamDemSetEventStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtc_tester::ParamDemSetEventStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::dtc_tester::ParamGetEventOfDtc* Arena::CreateMaybeMessage< ::dtc_tester::ParamGetEventOfDtc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtc_tester::ParamGetEventOfDtc >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

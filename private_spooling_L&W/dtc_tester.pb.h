// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ex_2eproto;
namespace dtc_tester {
class DemEventIdType;
struct DemEventIdTypeDefaultTypeInternal;
extern DemEventIdTypeDefaultTypeInternal _DemEventIdType_default_instance_;
class ParamDemSetEnableCond;
struct ParamDemSetEnableCondDefaultTypeInternal;
extern ParamDemSetEnableCondDefaultTypeInternal _ParamDemSetEnableCond_default_instance_;
class ParamDemSetEventStatus;
struct ParamDemSetEventStatusDefaultTypeInternal;
extern ParamDemSetEventStatusDefaultTypeInternal _ParamDemSetEventStatus_default_instance_;
class ParamDemSetOpCycleState;
struct ParamDemSetOpCycleStateDefaultTypeInternal;
extern ParamDemSetOpCycleStateDefaultTypeInternal _ParamDemSetOpCycleState_default_instance_;
class ParamGetEventOfDtc;
struct ParamGetEventOfDtcDefaultTypeInternal;
extern ParamGetEventOfDtcDefaultTypeInternal _ParamGetEventOfDtc_default_instance_;
class StdReturnType;
struct StdReturnTypeDefaultTypeInternal;
extern StdReturnTypeDefaultTypeInternal _StdReturnType_default_instance_;
}  // namespace dtc_tester
PROTOBUF_NAMESPACE_OPEN
template<> ::dtc_tester::DemEventIdType* Arena::CreateMaybeMessage<::dtc_tester::DemEventIdType>(Arena*);
template<> ::dtc_tester::ParamDemSetEnableCond* Arena::CreateMaybeMessage<::dtc_tester::ParamDemSetEnableCond>(Arena*);
template<> ::dtc_tester::ParamDemSetEventStatus* Arena::CreateMaybeMessage<::dtc_tester::ParamDemSetEventStatus>(Arena*);
template<> ::dtc_tester::ParamDemSetOpCycleState* Arena::CreateMaybeMessage<::dtc_tester::ParamDemSetOpCycleState>(Arena*);
template<> ::dtc_tester::ParamGetEventOfDtc* Arena::CreateMaybeMessage<::dtc_tester::ParamGetEventOfDtc>(Arena*);
template<> ::dtc_tester::StdReturnType* Arena::CreateMaybeMessage<::dtc_tester::StdReturnType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtc_tester {

// ===================================================================

class StdReturnType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtc_tester.StdReturnType) */ {
 public:
  inline StdReturnType() : StdReturnType(nullptr) {}
  ~StdReturnType() override;
  explicit constexpr StdReturnType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StdReturnType(const StdReturnType& from);
  StdReturnType(StdReturnType&& from) noexcept
    : StdReturnType() {
    *this = ::std::move(from);
  }

  inline StdReturnType& operator=(const StdReturnType& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdReturnType& operator=(StdReturnType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StdReturnType& default_instance() {
    return *internal_default_instance();
  }
  static inline const StdReturnType* internal_default_instance() {
    return reinterpret_cast<const StdReturnType*>(
               &_StdReturnType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StdReturnType& a, StdReturnType& b) {
    a.Swap(&b);
  }
  inline void Swap(StdReturnType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StdReturnType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdReturnType* New() const final {
    return new StdReturnType();
  }

  StdReturnType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdReturnType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StdReturnType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StdReturnType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdReturnType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtc_tester.StdReturnType";
  }
  protected:
  explicit StdReturnType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdReturnTypeFieldNumber = 1,
  };
  // uint32 std_return_type = 1;
  void clear_std_return_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 std_return_type() const;
  void set_std_return_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_std_return_type() const;
  void _internal_set_std_return_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dtc_tester.StdReturnType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 std_return_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ex_2eproto;
};
// -------------------------------------------------------------------

class DemEventIdType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtc_tester.DemEventIdType) */ {
 public:
  inline DemEventIdType() : DemEventIdType(nullptr) {}
  ~DemEventIdType() override;
  explicit constexpr DemEventIdType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DemEventIdType(const DemEventIdType& from);
  DemEventIdType(DemEventIdType&& from) noexcept
    : DemEventIdType() {
    *this = ::std::move(from);
  }

  inline DemEventIdType& operator=(const DemEventIdType& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemEventIdType& operator=(DemEventIdType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DemEventIdType& default_instance() {
    return *internal_default_instance();
  }
  static inline const DemEventIdType* internal_default_instance() {
    return reinterpret_cast<const DemEventIdType*>(
               &_DemEventIdType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DemEventIdType& a, DemEventIdType& b) {
    a.Swap(&b);
  }
  inline void Swap(DemEventIdType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemEventIdType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemEventIdType* New() const final {
    return new DemEventIdType();
  }

  DemEventIdType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemEventIdType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DemEventIdType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DemEventIdType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemEventIdType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtc_tester.DemEventIdType";
  }
  protected:
  explicit DemEventIdType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemEventIdTypeFieldNumber = 1,
  };
  // uint32 dem_event_id_type = 1;
  void clear_dem_event_id_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 dem_event_id_type() const;
  void set_dem_event_id_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dem_event_id_type() const;
  void _internal_set_dem_event_id_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dtc_tester.DemEventIdType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dem_event_id_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ex_2eproto;
};
// -------------------------------------------------------------------

class ParamDemSetOpCycleState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtc_tester.ParamDemSetOpCycleState) */ {
 public:
  inline ParamDemSetOpCycleState() : ParamDemSetOpCycleState(nullptr) {}
  ~ParamDemSetOpCycleState() override;
  explicit constexpr ParamDemSetOpCycleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamDemSetOpCycleState(const ParamDemSetOpCycleState& from);
  ParamDemSetOpCycleState(ParamDemSetOpCycleState&& from) noexcept
    : ParamDemSetOpCycleState() {
    *this = ::std::move(from);
  }

  inline ParamDemSetOpCycleState& operator=(const ParamDemSetOpCycleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamDemSetOpCycleState& operator=(ParamDemSetOpCycleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamDemSetOpCycleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamDemSetOpCycleState* internal_default_instance() {
    return reinterpret_cast<const ParamDemSetOpCycleState*>(
               &_ParamDemSetOpCycleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParamDemSetOpCycleState& a, ParamDemSetOpCycleState& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamDemSetOpCycleState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamDemSetOpCycleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamDemSetOpCycleState* New() const final {
    return new ParamDemSetOpCycleState();
  }

  ParamDemSetOpCycleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamDemSetOpCycleState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamDemSetOpCycleState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamDemSetOpCycleState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamDemSetOpCycleState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtc_tester.ParamDemSetOpCycleState";
  }
  protected:
  explicit ParamDemSetOpCycleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationCycleIdFieldNumber = 1,
    kCycleStateFieldNumber = 2,
  };
  // uint32 operation_cycle_id = 1;
  void clear_operation_cycle_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 operation_cycle_id() const;
  void set_operation_cycle_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operation_cycle_id() const;
  void _internal_set_operation_cycle_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cycle_state = 2;
  void clear_cycle_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 cycle_state() const;
  void set_cycle_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cycle_state() const;
  void _internal_set_cycle_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dtc_tester.ParamDemSetOpCycleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operation_cycle_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cycle_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ex_2eproto;
};
// -------------------------------------------------------------------

class ParamDemSetEnableCond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtc_tester.ParamDemSetEnableCond) */ {
 public:
  inline ParamDemSetEnableCond() : ParamDemSetEnableCond(nullptr) {}
  ~ParamDemSetEnableCond() override;
  explicit constexpr ParamDemSetEnableCond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamDemSetEnableCond(const ParamDemSetEnableCond& from);
  ParamDemSetEnableCond(ParamDemSetEnableCond&& from) noexcept
    : ParamDemSetEnableCond() {
    *this = ::std::move(from);
  }

  inline ParamDemSetEnableCond& operator=(const ParamDemSetEnableCond& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamDemSetEnableCond& operator=(ParamDemSetEnableCond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamDemSetEnableCond& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamDemSetEnableCond* internal_default_instance() {
    return reinterpret_cast<const ParamDemSetEnableCond*>(
               &_ParamDemSetEnableCond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ParamDemSetEnableCond& a, ParamDemSetEnableCond& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamDemSetEnableCond* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamDemSetEnableCond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamDemSetEnableCond* New() const final {
    return new ParamDemSetEnableCond();
  }

  ParamDemSetEnableCond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamDemSetEnableCond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamDemSetEnableCond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamDemSetEnableCond& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamDemSetEnableCond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtc_tester.ParamDemSetEnableCond";
  }
  protected:
  explicit ParamDemSetEnableCond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableConditionIdFieldNumber = 1,
    kConditionFulfilledFieldNumber = 2,
  };
  // uint32 enable_condition_id = 1;
  void clear_enable_condition_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 enable_condition_id() const;
  void set_enable_condition_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enable_condition_id() const;
  void _internal_set_enable_condition_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool condition_fulfilled = 2;
  void clear_condition_fulfilled();
  bool condition_fulfilled() const;
  void set_condition_fulfilled(bool value);
  private:
  bool _internal_condition_fulfilled() const;
  void _internal_set_condition_fulfilled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dtc_tester.ParamDemSetEnableCond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enable_condition_id_;
  bool condition_fulfilled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ex_2eproto;
};
// -------------------------------------------------------------------

class ParamDemSetEventStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtc_tester.ParamDemSetEventStatus) */ {
 public:
  inline ParamDemSetEventStatus() : ParamDemSetEventStatus(nullptr) {}
  ~ParamDemSetEventStatus() override;
  explicit constexpr ParamDemSetEventStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamDemSetEventStatus(const ParamDemSetEventStatus& from);
  ParamDemSetEventStatus(ParamDemSetEventStatus&& from) noexcept
    : ParamDemSetEventStatus() {
    *this = ::std::move(from);
  }

  inline ParamDemSetEventStatus& operator=(const ParamDemSetEventStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamDemSetEventStatus& operator=(ParamDemSetEventStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamDemSetEventStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamDemSetEventStatus* internal_default_instance() {
    return reinterpret_cast<const ParamDemSetEventStatus*>(
               &_ParamDemSetEventStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ParamDemSetEventStatus& a, ParamDemSetEventStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamDemSetEventStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamDemSetEventStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamDemSetEventStatus* New() const final {
    return new ParamDemSetEventStatus();
  }

  ParamDemSetEventStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamDemSetEventStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamDemSetEventStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamDemSetEventStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamDemSetEventStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtc_tester.ParamDemSetEventStatus";
  }
  protected:
  explicit ParamDemSetEventStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kEventStatusFieldNumber = 2,
  };
  // uint32 event_id = 1;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 event_status = 2;
  void clear_event_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_status() const;
  void set_event_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_status() const;
  void _internal_set_event_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dtc_tester.ParamDemSetEventStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ex_2eproto;
};
// -------------------------------------------------------------------

class ParamGetEventOfDtc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtc_tester.ParamGetEventOfDtc) */ {
 public:
  inline ParamGetEventOfDtc() : ParamGetEventOfDtc(nullptr) {}
  ~ParamGetEventOfDtc() override;
  explicit constexpr ParamGetEventOfDtc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamGetEventOfDtc(const ParamGetEventOfDtc& from);
  ParamGetEventOfDtc(ParamGetEventOfDtc&& from) noexcept
    : ParamGetEventOfDtc() {
    *this = ::std::move(from);
  }

  inline ParamGetEventOfDtc& operator=(const ParamGetEventOfDtc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamGetEventOfDtc& operator=(ParamGetEventOfDtc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamGetEventOfDtc& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamGetEventOfDtc* internal_default_instance() {
    return reinterpret_cast<const ParamGetEventOfDtc*>(
               &_ParamGetEventOfDtc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ParamGetEventOfDtc& a, ParamGetEventOfDtc& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamGetEventOfDtc* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamGetEventOfDtc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamGetEventOfDtc* New() const final {
    return new ParamGetEventOfDtc();
  }

  ParamGetEventOfDtc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamGetEventOfDtc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamGetEventOfDtc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamGetEventOfDtc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamGetEventOfDtc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtc_tester.ParamGetEventOfDtc";
  }
  protected:
  explicit ParamGetEventOfDtc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDtcFieldNumber = 1,
  };
  // uint32 dtc = 1;
  void clear_dtc();
  ::PROTOBUF_NAMESPACE_ID::uint32 dtc() const;
  void set_dtc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dtc() const;
  void _internal_set_dtc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dtc_tester.ParamGetEventOfDtc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dtc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StdReturnType

// uint32 std_return_type = 1;
inline void StdReturnType::clear_std_return_type() {
  std_return_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StdReturnType::_internal_std_return_type() const {
  return std_return_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StdReturnType::std_return_type() const {
  // @@protoc_insertion_point(field_get:dtc_tester.StdReturnType.std_return_type)
  return _internal_std_return_type();
}
inline void StdReturnType::_internal_set_std_return_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  std_return_type_ = value;
}
inline void StdReturnType::set_std_return_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_std_return_type(value);
  // @@protoc_insertion_point(field_set:dtc_tester.StdReturnType.std_return_type)
}

// -------------------------------------------------------------------

// DemEventIdType

// uint32 dem_event_id_type = 1;
inline void DemEventIdType::clear_dem_event_id_type() {
  dem_event_id_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DemEventIdType::_internal_dem_event_id_type() const {
  return dem_event_id_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DemEventIdType::dem_event_id_type() const {
  // @@protoc_insertion_point(field_get:dtc_tester.DemEventIdType.dem_event_id_type)
  return _internal_dem_event_id_type();
}
inline void DemEventIdType::_internal_set_dem_event_id_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dem_event_id_type_ = value;
}
inline void DemEventIdType::set_dem_event_id_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dem_event_id_type(value);
  // @@protoc_insertion_point(field_set:dtc_tester.DemEventIdType.dem_event_id_type)
}

// -------------------------------------------------------------------

// ParamDemSetOpCycleState

// uint32 operation_cycle_id = 1;
inline void ParamDemSetOpCycleState::clear_operation_cycle_id() {
  operation_cycle_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetOpCycleState::_internal_operation_cycle_id() const {
  return operation_cycle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetOpCycleState::operation_cycle_id() const {
  // @@protoc_insertion_point(field_get:dtc_tester.ParamDemSetOpCycleState.operation_cycle_id)
  return _internal_operation_cycle_id();
}
inline void ParamDemSetOpCycleState::_internal_set_operation_cycle_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operation_cycle_id_ = value;
}
inline void ParamDemSetOpCycleState::set_operation_cycle_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operation_cycle_id(value);
  // @@protoc_insertion_point(field_set:dtc_tester.ParamDemSetOpCycleState.operation_cycle_id)
}

// uint32 cycle_state = 2;
inline void ParamDemSetOpCycleState::clear_cycle_state() {
  cycle_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetOpCycleState::_internal_cycle_state() const {
  return cycle_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetOpCycleState::cycle_state() const {
  // @@protoc_insertion_point(field_get:dtc_tester.ParamDemSetOpCycleState.cycle_state)
  return _internal_cycle_state();
}
inline void ParamDemSetOpCycleState::_internal_set_cycle_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cycle_state_ = value;
}
inline void ParamDemSetOpCycleState::set_cycle_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cycle_state(value);
  // @@protoc_insertion_point(field_set:dtc_tester.ParamDemSetOpCycleState.cycle_state)
}

// -------------------------------------------------------------------

// ParamDemSetEnableCond

// uint32 enable_condition_id = 1;
inline void ParamDemSetEnableCond::clear_enable_condition_id() {
  enable_condition_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetEnableCond::_internal_enable_condition_id() const {
  return enable_condition_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetEnableCond::enable_condition_id() const {
  // @@protoc_insertion_point(field_get:dtc_tester.ParamDemSetEnableCond.enable_condition_id)
  return _internal_enable_condition_id();
}
inline void ParamDemSetEnableCond::_internal_set_enable_condition_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enable_condition_id_ = value;
}
inline void ParamDemSetEnableCond::set_enable_condition_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enable_condition_id(value);
  // @@protoc_insertion_point(field_set:dtc_tester.ParamDemSetEnableCond.enable_condition_id)
}

// bool condition_fulfilled = 2;
inline void ParamDemSetEnableCond::clear_condition_fulfilled() {
  condition_fulfilled_ = false;
}
inline bool ParamDemSetEnableCond::_internal_condition_fulfilled() const {
  return condition_fulfilled_;
}
inline bool ParamDemSetEnableCond::condition_fulfilled() const {
  // @@protoc_insertion_point(field_get:dtc_tester.ParamDemSetEnableCond.condition_fulfilled)
  return _internal_condition_fulfilled();
}
inline void ParamDemSetEnableCond::_internal_set_condition_fulfilled(bool value) {
  
  condition_fulfilled_ = value;
}
inline void ParamDemSetEnableCond::set_condition_fulfilled(bool value) {
  _internal_set_condition_fulfilled(value);
  // @@protoc_insertion_point(field_set:dtc_tester.ParamDemSetEnableCond.condition_fulfilled)
}

// -------------------------------------------------------------------

// ParamDemSetEventStatus

// uint32 event_id = 1;
inline void ParamDemSetEventStatus::clear_event_id() {
  event_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetEventStatus::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetEventStatus::event_id() const {
  // @@protoc_insertion_point(field_get:dtc_tester.ParamDemSetEventStatus.event_id)
  return _internal_event_id();
}
inline void ParamDemSetEventStatus::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_id_ = value;
}
inline void ParamDemSetEventStatus::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:dtc_tester.ParamDemSetEventStatus.event_id)
}

// uint32 event_status = 2;
inline void ParamDemSetEventStatus::clear_event_status() {
  event_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetEventStatus::_internal_event_status() const {
  return event_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamDemSetEventStatus::event_status() const {
  // @@protoc_insertion_point(field_get:dtc_tester.ParamDemSetEventStatus.event_status)
  return _internal_event_status();
}
inline void ParamDemSetEventStatus::_internal_set_event_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_status_ = value;
}
inline void ParamDemSetEventStatus::set_event_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_status(value);
  // @@protoc_insertion_point(field_set:dtc_tester.ParamDemSetEventStatus.event_status)
}

// -------------------------------------------------------------------

// ParamGetEventOfDtc

// uint32 dtc = 1;
inline void ParamGetEventOfDtc::clear_dtc() {
  dtc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamGetEventOfDtc::_internal_dtc() const {
  return dtc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParamGetEventOfDtc::dtc() const {
  // @@protoc_insertion_point(field_get:dtc_tester.ParamGetEventOfDtc.dtc)
  return _internal_dtc();
}
inline void ParamGetEventOfDtc::_internal_set_dtc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dtc_ = value;
}
inline void ParamGetEventOfDtc::set_dtc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dtc(value);
  // @@protoc_insertion_point(field_set:dtc_tester.ParamGetEventOfDtc.dtc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dtc_tester

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ex_2eproto

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ex.proto
#ifndef GRPC_ex_2eproto__INCLUDED
#define GRPC_ex_2eproto__INCLUDED

#include "ex.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace dtc_tester {

class RpcService final {
 public:
  static constexpr char const* service_full_name() {
    return "dtc_tester.RpcService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::dtc_tester::StdReturnType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>> AsyncDem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>>(AsyncDem_SetOperationCycleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>> PrepareAsyncDem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>>(PrepareAsyncDem_SetOperationCycleStateRaw(context, request, cq));
    }
    virtual ::grpc::Status Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::dtc_tester::StdReturnType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>> AsyncDem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>>(AsyncDem_SetEnableConditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>> PrepareAsyncDem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>>(PrepareAsyncDem_SetEnableConditionRaw(context, request, cq));
    }
    virtual ::grpc::Status Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::dtc_tester::StdReturnType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>> AsyncDem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>>(AsyncDem_SetEventStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>> PrepareAsyncDem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>>(PrepareAsyncDem_SetEventStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::dtc_tester::DemEventIdType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::DemEventIdType>> AsyncGetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::DemEventIdType>>(AsyncGetEventOfDTCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::DemEventIdType>> PrepareAsyncGetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::DemEventIdType>>(PrepareAsyncGetEventOfDTCRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>* AsyncDem_SetOperationCycleStateRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>* PrepareAsyncDem_SetOperationCycleStateRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>* AsyncDem_SetEnableConditionRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>* PrepareAsyncDem_SetEnableConditionRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>* AsyncDem_SetEventStatusRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::StdReturnType>* PrepareAsyncDem_SetEventStatusRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::DemEventIdType>* AsyncGetEventOfDTCRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dtc_tester::DemEventIdType>* PrepareAsyncGetEventOfDTCRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::dtc_tester::StdReturnType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>> AsyncDem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>>(AsyncDem_SetOperationCycleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>> PrepareAsyncDem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>>(PrepareAsyncDem_SetOperationCycleStateRaw(context, request, cq));
    }
    ::grpc::Status Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::dtc_tester::StdReturnType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>> AsyncDem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>>(AsyncDem_SetEnableConditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>> PrepareAsyncDem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>>(PrepareAsyncDem_SetEnableConditionRaw(context, request, cq));
    }
    ::grpc::Status Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::dtc_tester::StdReturnType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>> AsyncDem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>>(AsyncDem_SetEventStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>> PrepareAsyncDem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>>(PrepareAsyncDem_SetEventStatusRaw(context, request, cq));
    }
    ::grpc::Status GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::dtc_tester::DemEventIdType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>> AsyncGetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>>(AsyncGetEventOfDTCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>> PrepareAsyncGetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>>(PrepareAsyncGetEventOfDTCRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)>) override;
      void Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)>) override;
      void Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)>) override;
      void Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response, std::function<void(::grpc::Status)>) override;
      void GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* AsyncDem_SetOperationCycleStateRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* PrepareAsyncDem_SetOperationCycleStateRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* AsyncDem_SetEnableConditionRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* PrepareAsyncDem_SetEnableConditionRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* AsyncDem_SetEventStatusRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* PrepareAsyncDem_SetEventStatusRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>* AsyncGetEventOfDTCRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>* PrepareAsyncGetEventOfDTCRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Dem_SetOperationCycleState_;
    const ::grpc::internal::RpcMethod rpcmethod_Dem_SetEnableCondition_;
    const ::grpc::internal::RpcMethod rpcmethod_Dem_SetEventStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEventOfDTC_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Dem_SetOperationCycleState(::grpc::ServerContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response);
    virtual ::grpc::Status Dem_SetEnableCondition(::grpc::ServerContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response);
    virtual ::grpc::Status Dem_SetEventStatus(::grpc::ServerContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response);
    virtual ::grpc::Status GetEventOfDTC(::grpc::ServerContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Dem_SetOperationCycleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Dem_SetOperationCycleState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Dem_SetOperationCycleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetOperationCycleState(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetOpCycleState* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDem_SetOperationCycleState(::grpc::ServerContext* context, ::dtc_tester::ParamDemSetOpCycleState* request, ::grpc::ServerAsyncResponseWriter< ::dtc_tester::StdReturnType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Dem_SetEnableCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Dem_SetEnableCondition() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Dem_SetEnableCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEnableCondition(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEnableCond* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDem_SetEnableCondition(::grpc::ServerContext* context, ::dtc_tester::ParamDemSetEnableCond* request, ::grpc::ServerAsyncResponseWriter< ::dtc_tester::StdReturnType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Dem_SetEventStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Dem_SetEventStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Dem_SetEventStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEventStatus(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEventStatus* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDem_SetEventStatus(::grpc::ServerContext* context, ::dtc_tester::ParamDemSetEventStatus* request, ::grpc::ServerAsyncResponseWriter< ::dtc_tester::StdReturnType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEventOfDTC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEventOfDTC() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetEventOfDTC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventOfDTC(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamGetEventOfDtc* /*request*/, ::dtc_tester::DemEventIdType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventOfDTC(::grpc::ServerContext* context, ::dtc_tester::ParamGetEventOfDtc* request, ::grpc::ServerAsyncResponseWriter< ::dtc_tester::DemEventIdType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Dem_SetOperationCycleState<WithAsyncMethod_Dem_SetEnableCondition<WithAsyncMethod_Dem_SetEventStatus<WithAsyncMethod_GetEventOfDTC<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Dem_SetOperationCycleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Dem_SetOperationCycleState() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response) { return this->Dem_SetOperationCycleState(context, request, response); }));}
    void SetMessageAllocatorFor_Dem_SetOperationCycleState(
        ::grpc::MessageAllocator< ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Dem_SetOperationCycleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetOperationCycleState(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetOpCycleState* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Dem_SetOperationCycleState(
      ::grpc::CallbackServerContext* /*context*/, const ::dtc_tester::ParamDemSetOpCycleState* /*request*/, ::dtc_tester::StdReturnType* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Dem_SetEnableCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Dem_SetEnableCondition() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response) { return this->Dem_SetEnableCondition(context, request, response); }));}
    void SetMessageAllocatorFor_Dem_SetEnableCondition(
        ::grpc::MessageAllocator< ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Dem_SetEnableCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEnableCondition(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEnableCond* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Dem_SetEnableCondition(
      ::grpc::CallbackServerContext* /*context*/, const ::dtc_tester::ParamDemSetEnableCond* /*request*/, ::dtc_tester::StdReturnType* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Dem_SetEventStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Dem_SetEventStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response) { return this->Dem_SetEventStatus(context, request, response); }));}
    void SetMessageAllocatorFor_Dem_SetEventStatus(
        ::grpc::MessageAllocator< ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Dem_SetEventStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEventStatus(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEventStatus* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Dem_SetEventStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::dtc_tester::ParamDemSetEventStatus* /*request*/, ::dtc_tester::StdReturnType* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEventOfDTC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEventOfDTC() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response) { return this->GetEventOfDTC(context, request, response); }));}
    void SetMessageAllocatorFor_GetEventOfDTC(
        ::grpc::MessageAllocator< ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEventOfDTC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventOfDTC(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamGetEventOfDtc* /*request*/, ::dtc_tester::DemEventIdType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventOfDTC(
      ::grpc::CallbackServerContext* /*context*/, const ::dtc_tester::ParamGetEventOfDtc* /*request*/, ::dtc_tester::DemEventIdType* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Dem_SetOperationCycleState<WithCallbackMethod_Dem_SetEnableCondition<WithCallbackMethod_Dem_SetEventStatus<WithCallbackMethod_GetEventOfDTC<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Dem_SetOperationCycleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Dem_SetOperationCycleState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Dem_SetOperationCycleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetOperationCycleState(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetOpCycleState* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Dem_SetEnableCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Dem_SetEnableCondition() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Dem_SetEnableCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEnableCondition(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEnableCond* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Dem_SetEventStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Dem_SetEventStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Dem_SetEventStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEventStatus(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEventStatus* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEventOfDTC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEventOfDTC() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetEventOfDTC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventOfDTC(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamGetEventOfDtc* /*request*/, ::dtc_tester::DemEventIdType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Dem_SetOperationCycleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Dem_SetOperationCycleState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Dem_SetOperationCycleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetOperationCycleState(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetOpCycleState* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDem_SetOperationCycleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Dem_SetEnableCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Dem_SetEnableCondition() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Dem_SetEnableCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEnableCondition(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEnableCond* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDem_SetEnableCondition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Dem_SetEventStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Dem_SetEventStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Dem_SetEventStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEventStatus(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEventStatus* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDem_SetEventStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEventOfDTC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEventOfDTC() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetEventOfDTC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventOfDTC(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamGetEventOfDtc* /*request*/, ::dtc_tester::DemEventIdType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventOfDTC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Dem_SetOperationCycleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Dem_SetOperationCycleState() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Dem_SetOperationCycleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_Dem_SetOperationCycleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetOperationCycleState(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetOpCycleState* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Dem_SetOperationCycleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Dem_SetEnableCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Dem_SetEnableCondition() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Dem_SetEnableCondition(context, request, response); }));
    }
    ~WithRawCallbackMethod_Dem_SetEnableCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEnableCondition(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEnableCond* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Dem_SetEnableCondition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Dem_SetEventStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Dem_SetEventStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Dem_SetEventStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_Dem_SetEventStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Dem_SetEventStatus(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEventStatus* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Dem_SetEventStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEventOfDTC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEventOfDTC() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEventOfDTC(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEventOfDTC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventOfDTC(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamGetEventOfDtc* /*request*/, ::dtc_tester::DemEventIdType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventOfDTC(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Dem_SetOperationCycleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Dem_SetOperationCycleState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType>* streamer) {
                       return this->StreamedDem_SetOperationCycleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Dem_SetOperationCycleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Dem_SetOperationCycleState(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetOpCycleState* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDem_SetOperationCycleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dtc_tester::ParamDemSetOpCycleState,::dtc_tester::StdReturnType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Dem_SetEnableCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Dem_SetEnableCondition() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType>* streamer) {
                       return this->StreamedDem_SetEnableCondition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Dem_SetEnableCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Dem_SetEnableCondition(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEnableCond* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDem_SetEnableCondition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dtc_tester::ParamDemSetEnableCond,::dtc_tester::StdReturnType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Dem_SetEventStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Dem_SetEventStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType>* streamer) {
                       return this->StreamedDem_SetEventStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Dem_SetEventStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Dem_SetEventStatus(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamDemSetEventStatus* /*request*/, ::dtc_tester::StdReturnType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDem_SetEventStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dtc_tester::ParamDemSetEventStatus,::dtc_tester::StdReturnType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEventOfDTC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEventOfDTC() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType>* streamer) {
                       return this->StreamedGetEventOfDTC(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEventOfDTC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEventOfDTC(::grpc::ServerContext* /*context*/, const ::dtc_tester::ParamGetEventOfDtc* /*request*/, ::dtc_tester::DemEventIdType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEventOfDTC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dtc_tester::ParamGetEventOfDtc,::dtc_tester::DemEventIdType>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Dem_SetOperationCycleState<WithStreamedUnaryMethod_Dem_SetEnableCondition<WithStreamedUnaryMethod_Dem_SetEventStatus<WithStreamedUnaryMethod_GetEventOfDTC<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Dem_SetOperationCycleState<WithStreamedUnaryMethod_Dem_SetEnableCondition<WithStreamedUnaryMethod_Dem_SetEventStatus<WithStreamedUnaryMethod_GetEventOfDTC<Service > > > > StreamedService;
};

}  // namespace dtc_tester


#endif  // GRPC_ex_2eproto__INCLUDED

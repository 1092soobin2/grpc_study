// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ex.proto

#include "ex.pb.h"
#include "ex.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dtc_tester {

static const char* RpcService_method_names[] = {
  "/dtc_tester.RpcService/Dem_SetOperationCycleState",
  "/dtc_tester.RpcService/Dem_SetEnableCondition",
  "/dtc_tester.RpcService/Dem_SetEventStatus",
  "/dtc_tester.RpcService/GetEventOfDTC",
};

std::unique_ptr< RpcService::Stub> RpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RpcService::Stub> stub(new RpcService::Stub(channel, options));
  return stub;
}

RpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Dem_SetOperationCycleState_(RpcService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Dem_SetEnableCondition_(RpcService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Dem_SetEventStatus_(RpcService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEventOfDTC_(RpcService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RpcService::Stub::Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::dtc_tester::StdReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Dem_SetOperationCycleState_, context, request, response);
}

void RpcService::Stub::async::Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Dem_SetOperationCycleState_, context, request, response, std::move(f));
}

void RpcService::Stub::async::Dem_SetOperationCycleState(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Dem_SetOperationCycleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* RpcService::Stub::PrepareAsyncDem_SetOperationCycleStateRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dtc_tester::StdReturnType, ::dtc_tester::ParamDemSetOpCycleState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Dem_SetOperationCycleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* RpcService::Stub::AsyncDem_SetOperationCycleStateRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetOpCycleState& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDem_SetOperationCycleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcService::Stub::Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::dtc_tester::StdReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Dem_SetEnableCondition_, context, request, response);
}

void RpcService::Stub::async::Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Dem_SetEnableCondition_, context, request, response, std::move(f));
}

void RpcService::Stub::async::Dem_SetEnableCondition(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Dem_SetEnableCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* RpcService::Stub::PrepareAsyncDem_SetEnableConditionRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dtc_tester::StdReturnType, ::dtc_tester::ParamDemSetEnableCond, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Dem_SetEnableCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* RpcService::Stub::AsyncDem_SetEnableConditionRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEnableCond& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDem_SetEnableConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcService::Stub::Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::dtc_tester::StdReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Dem_SetEventStatus_, context, request, response);
}

void RpcService::Stub::async::Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Dem_SetEventStatus_, context, request, response, std::move(f));
}

void RpcService::Stub::async::Dem_SetEventStatus(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Dem_SetEventStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* RpcService::Stub::PrepareAsyncDem_SetEventStatusRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dtc_tester::StdReturnType, ::dtc_tester::ParamDemSetEventStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Dem_SetEventStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::StdReturnType>* RpcService::Stub::AsyncDem_SetEventStatusRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamDemSetEventStatus& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDem_SetEventStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RpcService::Stub::GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::dtc_tester::DemEventIdType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEventOfDTC_, context, request, response);
}

void RpcService::Stub::async::GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventOfDTC_, context, request, response, std::move(f));
}

void RpcService::Stub::async::GetEventOfDTC(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEventOfDTC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>* RpcService::Stub::PrepareAsyncGetEventOfDTCRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dtc_tester::DemEventIdType, ::dtc_tester::ParamGetEventOfDtc, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEventOfDTC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dtc_tester::DemEventIdType>* RpcService::Stub::AsyncGetEventOfDTCRaw(::grpc::ClientContext* context, const ::dtc_tester::ParamGetEventOfDtc& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventOfDTCRaw(context, request, cq);
  result->StartCall();
  return result;
}

RpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::dtc_tester::ParamDemSetOpCycleState, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtc_tester::ParamDemSetOpCycleState* req,
             ::dtc_tester::StdReturnType* resp) {
               return service->Dem_SetOperationCycleState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::dtc_tester::ParamDemSetEnableCond, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtc_tester::ParamDemSetEnableCond* req,
             ::dtc_tester::StdReturnType* resp) {
               return service->Dem_SetEnableCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::dtc_tester::ParamDemSetEventStatus, ::dtc_tester::StdReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtc_tester::ParamDemSetEventStatus* req,
             ::dtc_tester::StdReturnType* resp) {
               return service->Dem_SetEventStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::dtc_tester::ParamGetEventOfDtc, ::dtc_tester::DemEventIdType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtc_tester::ParamGetEventOfDtc* req,
             ::dtc_tester::DemEventIdType* resp) {
               return service->GetEventOfDTC(ctx, req, resp);
             }, this)));
}

RpcService::Service::~Service() {
}

::grpc::Status RpcService::Service::Dem_SetOperationCycleState(::grpc::ServerContext* context, const ::dtc_tester::ParamDemSetOpCycleState* request, ::dtc_tester::StdReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::Dem_SetEnableCondition(::grpc::ServerContext* context, const ::dtc_tester::ParamDemSetEnableCond* request, ::dtc_tester::StdReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::Dem_SetEventStatus(::grpc::ServerContext* context, const ::dtc_tester::ParamDemSetEventStatus* request, ::dtc_tester::StdReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::GetEventOfDTC(::grpc::ServerContext* context, const ::dtc_tester::ParamGetEventOfDtc* request, ::dtc_tester::DemEventIdType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dtc_tester

